#!/usr/bin/env bash

[[ "$RUNNER_DEBUG" == 1 ]] && set -x
[[ $- == *x* ]] && export RUNNER_DEBUG=1

set -eu
set -o pipefail

function splitYamlIntoDir() {
  local yaml="${1?}"
  local dir="${2?}"
  local IFS=$'\n'
  local selector

  for selector in $(yq -c -s '.[] | select(.kind and .metadata.name) | {kind: .kind, namespace: .metadata.namespace, name: .metadata.name}' <"$yaml"); do
    local resourceName
    local kind
    local namespace
    local name
    kind="$(jq --argjson selector "$selector" -n -r '$selector.kind')"
    namespace="$(jq --argjson selector "$selector" -n -r '$selector.namespace')"
    name="$(jq --argjson selector "$selector" -n -r '$selector.name')"

    resourceName="$dir/$namespace/$kind/$name.yaml"
    if [[ -f "$resourceName" ]]; then
      echo "'$resourceName' shouldn't already exist" >/dev/stderr
      return 1
    fi
    mkdir -p "$(dirname "$resourceName")"
    # shellcheck disable=SC2016
    yq -y -s --argjson selector "$selector" '.[] | select((.kind == $selector.kind) and (.metadata.namespace == $selector.namespace) and (.metadata.name == $selector.name)) | del(.metadata.labels.chart) | del(.metadata.labels["helm.sh/chart"])' <"$yaml" >"$resourceName"
    if [[ "$kind" == "HelmRelease" ]]; then
      (
        "$(dirname "$0")/templateHelmRelease" -1 <<<"$(sed -s '$a---' <(yq -s -y '.[] | select(.apiVersion | contains("source.toolkit.fluxcd.io"))' <"$yaml") "$resourceName")" >"${resourceName}_templated"
        splitYamlIntoDir "${resourceName}_templated" "$(dirname "$resourceName")/$(basename -s .yaml "$resourceName")"
        rm "${resourceName}_templated"
      ) &
    fi
  done
  wait
}

splitYamlIntoDir "$@"
