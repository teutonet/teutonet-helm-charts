name: Validate Pull Request
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

on:
  pull_request_target:
    types:
      - opened
      - edited
      - reopened
      - synchronize

jobs:
  getChangedChart:
    if: ${{ !startsWith(github.head_ref, 'release-please--') }}
    permissions:
      pull-requests: read
    uses: ./.github/workflows/get-changed-chart.yaml
    with:
      pr_number: ${{ github.event.pull_request.number }}
  validateCommits:
    if: ${{ !startsWith(github.head_ref, 'release-please--') }}
    name: Validate commits
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Conventional commit check
        uses: cocogitto/cocogitto-action@5ae166018d8265bb2df85c1eb521e86a17b61085 # v3
  validateTitle:
    if: ${{ !startsWith(github.head_ref, 'release-please--') }}
    name: Validate Title
    runs-on: ubuntu-latest
    needs: getChangedChart
    permissions:
      pull-requests: read
    env:
      PR_TITLE: ${{ github.event.pull_request.title }}
    steps:
      - name: Conventional commit check
        uses: cocogitto/cocogitto-action@5ae166018d8265bb2df85c1eb521e86a17b61085 # v3
        with:
          check: false
      - name: Verify that PR title is a conventional commit message
        run: |
          [[ "$RUNNER_DEBUG" == 1 ]] && set -x
          set -e
          set -o pipefail

          if ! cog verify "$PR_TITLE"; then
            echo "PR title must be a conventional commit message" >&2
            exit 1
          fi
      - name: Verify correct scope of PR title
        if: ${{ needs.getChangedChart.outputs.found == 'true' }}
        env:
          CHANGED_CHART: ${{ needs.getChangedChart.outputs.chart }}
        run: |
          [[ "$RUNNER_DEBUG" == 1 ]] && set -x
          set -e
          set -o pipefail

          if ! cog verify "$PR_TITLE" 2>&1 | grep -Eq "^\s+Scope: $CHANGED_CHART(/.+|)\$"; then
            echo "PR title must have scope '$CHANGED_CHART/\$subscope'" >&2
            exit 1
          fi
      - name: Verify title reflects major update
        if: ${{ needs.getChangedChart.outputs.found == 'true' }}
        run: |
          [[ "$RUNNER_DEBUG" == 1 ]] && set -x
          set -e
          set -o pipefail

          if ! cog verify "$PR_TITLE" 2>&1 | grep -qi 'BREAKING CHANGE'; then
            # shellcheck disable=SC2086 # this needs to be splitted
            for commit in $(gh api --paginate "/repos/${GITHUB_REPOSITORY}/pulls/${PULL_REQUEST_NUMBER}/commits" | jq -cr 'map(.sha)[]'); do
              if cog verify "$(git log -n 1 $commit --format=%s)" 2>&1 | grep -qi 'BREAKING CHANGE'; then
                echo "You need to reflect the breaking change in the pull request title" >&2
                exit 1
              fi
            done
          fi
      - name: Verify readme is updated on major update
        if: ${{ needs.getChangedChart.outputs.found == 'true' }}
        env:
          CHANGED_CHART: ${{ needs.getChangedChart.outputs.chart }}
        run: |
          [[ "$RUNNER_DEBUG" == 1 ]] && set -x
          set -e
          set -o pipefail

          if cog verify "$PR_TITLE" 2>&1 | grep -qi 'BREAKING CHANGE'; then
            if ! gh api --paginate "/repos/${GITHUB_REPOSITORY}/pulls/${PULL_REQUEST_NUMBER}/files" | jq -cr 'map(.filename)[]' | grep -qi "charts/$CHANGED_CHART/README.md.gotmpl"; then
              echo "You need to update the readme on a major update" >&2
              exit 1
            fi
          fi
