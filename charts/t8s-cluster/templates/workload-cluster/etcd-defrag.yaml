{{- if .Values.controlPlane.hosted -}}
  {{- include "t8s-cluster.etcd-defrag" (dict "context" $) | nindent 0 -}}
{{- else -}}
  {{- include "t8s-cluster.helm.resourceIntoCluster" (dict "name" "etcd-defrag" "resource" (include "t8s-cluster.etcd-defrag" (dict "context" $)) "context" $ "additionalLabels" (dict "app.kubernetes.io/component" "etcd")) | nindent 0 -}}
{{- end -}}

{{- define "t8s-cluster.etcd-defrag" -}}
  {{- $_ := mustMerge . (pick .context "Values" "Release" "Chart") -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: kube-etcd-defrag
  namespace: {{ .Values.controlPlane.hosted | ternary .Release.Namespace "kube-system" }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 10
  successfulJobsHistoryLimit: 1
  schedule: '42 * * * *'
  jobTemplate:
    spec:
      backoffLimit: 6
      template:
        spec:
          automountServiceAccountToken: false
          containers:
            - command:
                - etcdctl
                - defrag
                - --cluster
                - --cacert=/etc/kubernetes/pki/etcd/ca.crt
                - --cert=/etc/kubernetes/pki/etcd/peer.crt
                - --key=/etc/kubernetes/pki/etcd/peer.key
              env:
                - name: ETCDCTL_API
                  value: "3"
                - name: ETCDCTL_ENDPOINTS
                  value: {{ .Values.controlPlane.hosted | ternary (printf "kmc-%s-etcd:2379" .Release.Name) "localhost:2379" }}
              image: {{ include "common.images.image" (dict "imageRoot" .Values.global.etcd.image "global" .Values.global) }}
              imagePullPolicy: IfNotPresent
              name: etcd-defrag
              securityContext:
                runAsUser: 1000
                runAsGroup: 1000
                runAsNonRoot: true
                privileged: false
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                readOnlyRootFilesystem: true
              volumeMounts:
                - mountPath: /etc/kubernetes/pki/etcd
                  name: etcd-certs
                  readOnly: true
          dnsPolicy: ClusterFirst
          restartPolicy: OnFailure
          {{- if not .Values.controlPlane.hosted }}
          hostNetwork: true
          nodeSelector:
            node-role.kubernetes.io/control-plane: ""
          tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/control-plane
              operator: Exists
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
              operator: Exists
          {{- end }}
          volumes:
            - name: etcd-certs
              {{- if .Values.controlPlane.hosted }}
              projected:
                defaultMode: 420
                sources:
                  - secret:
                      items:
                        - key: tls.crt
                          path: ca.crt
                      name: {{ printf "%s-etcd" .Release.Name }}
                  - secret:
                      items:
                        - key: tls.crt
                          path: peer.crt
                        - key: tls.key
                          path: peer.key
                      name: {{ printf "%s-etcd-peer" .Release.Name }}
              {{- else }}
              hostPath:
                path: /etc/kubernetes/pki/etcd
                type: Directory
              {{- end }}
{{- end -}}
