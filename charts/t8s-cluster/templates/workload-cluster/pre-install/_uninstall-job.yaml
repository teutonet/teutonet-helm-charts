{{- define "t8s-cluster.workload.uninstall-job" -}}
  {{- $name := .name -}}
  {{- $clusterResourceSet := .clusterResourceSet -}}
  {{- $_ := mustMerge . (pick .context "Values" "Release" "Chart") -}}
  {{- if lookup "addons.cluster.x-k8s.io/v1beta1" "ClusterResourceSet" .Release.Namespace $clusterResourceSet -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name }}-uninstall
  namespace: {{ .Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: {{ $name }}
    app.kubernetes.io/part-of: pre-install-upgrade-cleanup
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 1000
        fsGroup: 1000
      serviceAccountName: {{ $name }}-uninstall
      enableServiceLinks: false
      containers:
        - name: uninstall
          image: {{ include "common.images.image" (dict "imageRoot" .Values.global.kubectl.image "global" .Values.global) }}
          imagePullPolicy: {{ empty .Values.global.kubectl.image.digest | ternary "Always" "IfNotPresent" }}
          securityContext:
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop:
                - ALL
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /tmp/workload-kubeconfig
              name: workload-kubeconfig
              subPath: value
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CLUSTERRESOURCESET
              value: {{ $clusterResourceSet | quote }}
          command:
            - bash
            - -ex
            - -c
            - |-
              set -o pipefail
              {{- if .Release.IsInstall }}
              for resource in $(kubectl -n "$NAMESPACE" get clusterresourceset "$CLUSTERRESOURCESET" -o json | jq -r -c '.spec.resources | map({kind: .kind, name: .name})[]'); do
                kind="$(jq -r .kind <<<"$resource")"
                name="$(jq -r .name <<<"$resource")"
                case "$kind" in
                  ConfigMap)
                    kubectl -n "$NAMESPACE" get configmap "$name" -o json | jq -r '.data[]'
                    ;;
                  Secret)
                    secret="$(kubectl -n "$NAMESPACE" get secret "$name" -o json)"
                    for key in $(jq -r '.data | keys[]' <<<"$secret"); do
                      jq -r --arg key "$key" '.data[$key]' <<<"$secret" | base64 -d
                      echo '---'
                    done
                    ;;
                esac | kubectl --kubeconfig /tmp/workload-kubeconfig delete -f -
                kubectl -n "$NAMESPACE" delete "$kind" "$name"
              done
              {{- end }}
              kubectl -n "$NAMESPACE" delete clusterresourceset "$CLUSTERRESOURCESET"
      volumes:
        - name: workload-kubeconfig
          secret:
            secretName: {{ .Release.Name }}-kubeconfig
            optional: false
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $name }}-uninstall
  namespace: {{ .Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: {{ $name }}
    app.kubernetes.io/part-of: pre-install-cleanup
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $name }}-uninstall
  namespace: {{ .Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: {{ $name }}
    app.kubernetes.io/part-of: pre-install-cleanup
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
rules:
  - verbs:
      - get
      - delete
      - list
    resources:
      - secrets
      - configmaps
      - clusterresourcesets
    apiGroups:
      - ""
      - addons.cluster.x-k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ $name }}-uninstall
  namespace: {{ .Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: {{ $name }}
    app.kubernetes.io/part-of: pre-install-cleanup
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
subjects:
  - kind: ServiceAccount
    name: {{ $name }}-uninstall
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $name }}-uninstall
  {{- end -}}
{{- end -}}
