{{- $machineDeploymentClasses := dict "compute-plane" false "gpu-compute-plane" true -}}
{{- range $name, $spec := .Values.nodePools -}}
  {{- $machineDeploymentClasses = set $machineDeploymentClasses $name ($spec.flavor | contains "gpu") -}}
{{- end -}}
apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: {{ $.Release.Name }}
  namespace: {{ $.Release.Namespace }}
  labels: {{- include "common.labels.standard" $ | nindent 4 }}
spec:
  controlPlane:
    machineHealthCheck:
      maxUnhealthy: 1
      nodeStartupTimeout: 10m
      unhealthyConditions:
        - status: Unknown
          timeout: 600s
          type: Ready
        - status: 'False'
          timeout: 600s
          type: Ready
    nodeDrainTimeout: "8m"
    machineInfrastructure:
      ref:
        apiVersion: {{ include "t8s-cluster.clusterClass.infrastructureApiVersion" (dict) }}
        kind: OpenStackMachineTemplate
        name: {{ printf "%s-control-plane-%s" $.Release.Name (include "t8s-cluster.clusterClass.openStackMachineTemplate.specHashOfControlPlane" (dict "context" $)) }}
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: {{/* the full context is needed for .Files.Get */}}{{ printf "%s-%s" $.Release.Name (include "t8s-cluster.clusterClass.kubeadmControlPlaneTemplate.specHash" .) }}
  infrastructure:
    ref:
      apiVersion: {{ include "t8s-cluster.clusterClass.infrastructureApiVersion" (dict) }}
      kind: OpenStackClusterTemplate
      name: {{ printf "%s-%s" $.Release.Name (include "t8s-cluster.clusterClass.openStackClusterTemplate.specHash" (dict "context" $)) }}
  variables:
    - name: controlPlaneServerGroupID
      required: true
      schema:
        openAPIV3Schema:
          type: string
    - name: machineDeploymentServerGroupID
      required: false
      schema:
        openAPIV3Schema:
          type: string
    - name: dnsNameservers
      required: true
      schema:
        openAPIV3Schema:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
            format: ipv4
    - name: controlPlaneAvailabilityZones
      required: false
      schema:
        openAPIV3Schema:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
    - name: machineDeploymentFlavor
      required: true
      schema:
        openAPIV3Schema:
          type: string
          default: compute-plane-placeholder
  patches:
    - name: controlPlaneServerGroupID
      description: Sets the ServerGroupID for Control Plane machines.
      definitions:
        - jsonPatches:
            - op: add
              path: /spec/template/spec/serverGroupID
              valueFrom:
                variable: controlPlaneServerGroupID
          selector:
            apiVersion: {{ include "t8s-cluster.clusterClass.infrastructureApiVersion" (dict) }}
            kind: OpenStackMachineTemplate
            matchResources:
              controlPlane: true
    - name: machineDeploymentServerGroupID
      description: Sets the ServerGroupID for MachineDeployment machines.
      definitions:
        - jsonPatches:
            - op: add
              path: /spec/template/spec/serverGroupID
              valueFrom:
                variable: machineDeploymentServerGroupID
          selector:
            apiVersion: {{ include "t8s-cluster.clusterClass.infrastructureApiVersion" (dict) }}
            kind: OpenStackMachineTemplate
            matchResources:
              machineDeploymentClass:
                names: {{- $machineDeploymentClasses | keys | sortAlpha | toYaml | nindent 18 }}
    - name: machineDeploymentFlavour
      definitions:
        - jsonPatches:
            - op: add
              path: /spec/template/spec/flavor
              valueFrom:
                variable: machineDeploymentFlavor
          selector:
            apiVersion: {{ include "t8s-cluster.clusterClass.infrastructureApiVersion" (dict) }}
            kind: OpenStackMachineTemplate
            matchResources:
              machineDeploymentClass:
                names: {{- $machineDeploymentClasses | keys | sortAlpha | toYaml | nindent 18 }}
    - name: imageVersion
      description: Sets the image version for machines.
      definitions:
        - jsonPatches:
            - &imagePatch
              op: add
              path: /spec/template/spec/image
              valueFrom:
                template: {{ printf "t8s-engine-%s{{ .builtin.machineDeployment.version }}" .Values.openstackImageNamePrefix }}
          selector: &imagePatchSelector
            apiVersion: {{ include "t8s-cluster.clusterClass.infrastructureApiVersion" (dict) }}
            kind: OpenStackMachineTemplate
            matchResources:
              machineDeploymentClass:
                names: {{- $machineDeploymentClasses | keys | sortAlpha | toYaml | nindent 18 }}
        - jsonPatches:
            - <<: *imagePatch
              valueFrom:
                template: {{ printf "t8s-engine-%s{{ .builtin.controlPlane.version }}" .Values.openstackImageNamePrefix }}
          selector:
            <<: *imagePatchSelector
            matchResources:
              controlPlane: true
    - name: controlPlaneAvailabilityZones
      enabledIf: {{ `{{ if .controlPlaneAvailabilityZones }}true{{ end }}` | quote }}
      definitions:
        - selector:
            apiVersion: {{ include "t8s-cluster.clusterClass.infrastructureApiVersion" (dict) }}
            kind: OpenStackClusterTemplate
            matchResources:
              infrastructureCluster: true
          jsonPatches:
            - op: add
              path: /spec/template/spec/controlPlaneAvailabilityZones
              valueFrom:
                variable: controlPlaneAvailabilityZones
    - name: dnsNameservers
      definitions:
        - selector:
            apiVersion: {{ include "t8s-cluster.clusterClass.infrastructureApiVersion" (dict) }}
            kind: OpenStackClusterTemplate
            matchResources:
              infrastructureCluster: true
          jsonPatches:
            - op: add
              path: /spec/template/spec/dnsNameservers
              valueFrom:
                variable: dnsNameservers
  workers:
    machineDeployments:
      {{- range $name, $isGpuDeploymentClass := $machineDeploymentClasses }}
      - class: {{ $name }}
        machineHealthCheck:
          nodeStartupTimeout: 8m
          unhealthyConditions:
            - status: Unknown
              timeout: 300s
              type: Ready
            - status: 'False'
              timeout: 300s
              type: Ready
        nodeDrainTimeout: "8m"
        strategy:
          type: RollingUpdate
          rollingUpdate:
            deletePolicy: Oldest
            {{/* TODO: this is only for our beta phase */}}
            {{- if $isGpuDeploymentClass }}
            maxSurge: 0
            maxUnavailable: 1
            {{- else }}
            maxSurge: 75%
            maxUnavailable: 0
            {{- end }}
        template:
          bootstrap:
            ref:
              apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
              kind: KubeadmConfigTemplate
              name: {{ printf "%s-%s-compute-plane" $.Release.Name ($isGpuDeploymentClass | ternary "gpu" "standard") }}
          infrastructure:
            ref:
              apiVersion: {{ include "t8s-cluster.clusterClass.infrastructureApiVersion" (dict) }}
              kind: OpenStackMachineTemplate
              name: {{ printf "%s-compute-plane-%s" $.Release.Name (include "t8s-cluster.clusterClass.openStackMachineTemplate.specHashOfNodePools" (dict "context" $)) }}
      {{- end }}
