{{/*
OpenStackClusterTemplate is immutable. We need to create new versions during upgrades.
Here we are generating a hash suffix.
*/}}
{{- define "t8s-cluster.clusterClass.openStackClusterTemplate.spec" -}}
  {{- $_ := mustMerge . (pick .context "Values") -}}
apiServerLoadBalancer:
  enabled: {{ not .Values.controlPlane.hosted }}
  {{- with .Values.controlPlane.allowedCIDRs }}
  allowedCIDRs: {{- toYaml . | nindent 4 }}
  {{- end }}
disableAPIServerFloatingIP: {{ .Values.controlPlane.hosted }}
bastion:
  enabled: {{ .Values.bastion.enabled }}
  {{- if .Values.bastion.enabled }}
    {{- with .Values.bastion.availabilityZone }}
  availabilityZone: {{ . }}
    {{- end }}
  spec:
    cloudName: {{ include "t8s-cluster.clusterClass.cloudName" (dict) }}
    flavor: standard.1.1905
    identityRef:
      kind: Secret
      name: {{ include "t8s-cluster.clusterClass.getIdentityRefSecretName" (dict "context" .context) }}
    image:
      filter:
        name: Ubuntu 20.04
    {{- with .Values.bastion.sshKeyName }}
    sshKeyName: {{ . }}
    {{- end }}
  {{- end }}
disablePortSecurity: false
identityRef:
  name: {{ include "t8s-cluster.clusterClass.getIdentityRefSecretName" (dict "context" .context) }}
  cloudName: {{ include "t8s-cluster.clusterClass.cloudName" (dict) }}

  {{- $securityGroupRules := dict -}}

  {{- $cni := include "t8s-cluster.cni" .context -}}
  {{- $controlPlaneSecurityGroup := "controlplane" -}}
  {{- $computePlaneSecurityGroup := "worker" -}}
  {{- $allRemoteManagedGroups := list $computePlaneSecurityGroup -}}
  {{- if not .Values.controlPlane.hosted -}}
    {{ $allRemoteManagedGroups = append $allRemoteManagedGroups $controlPlaneSecurityGroup -}}
  {{- end -}}

  {{- $cniSecurityGroupRules := dict -}}
  {{- if eq $cni "calico" }}
    {{- $cniSecurityGroupRules = set $cniSecurityGroupRules "BGP" (dict "port" 179) -}}
    {{- $cniSecurityGroupRules = set $cniSecurityGroupRules "IP-in-IP" (dict "protocol" "4") -}}
  {{- else if eq $cni "cilium" -}}
    {{- $cniSecurityGroupRules = set $cniSecurityGroupRules "VXLAN" (dict "port" 8472 "protocol" "udp") -}}
    {{- $cniSecurityGroupRules = set $cniSecurityGroupRules "health (http)" (dict "port" 4240) -}}
    {{- $cniSecurityGroupRules = set $cniSecurityGroupRules "health (ping)" (dict "protocol" "icmp") -}}
  {{- end }}
  {{- range $name, $securityGroupRule := $cniSecurityGroupRules -}}
    {{- $securityGroupRules = set $securityGroupRules (printf "%s %s" $cni $name) $securityGroupRule -}}
  {{- end -}}

  {{- $metricsSecurityGroupRules := dict -}}
  {{- $metricsSecurityGroupRules = set $metricsSecurityGroupRules "prometheus node-exporter" (dict "port" 9100 "remoteManagedGroups" (list $computePlaneSecurityGroup)) -}}
  {{- if not .Values.controlPlane.hosted -}}
    {{- $metricsSecurityGroupRules = set $metricsSecurityGroupRules "etcd" (dict "port" 2381 "securityGroup" $controlPlaneSecurityGroup "remoteManagedGroups" (list $computePlaneSecurityGroup)) -}}
    {{- $metricsSecurityGroupRules = set $metricsSecurityGroupRules "kube-proxy" (dict "port" 10249 "securityGroup" $controlPlaneSecurityGroup "remoteManagedGroups" (list $computePlaneSecurityGroup)) -}}
    {{- $metricsSecurityGroupRules = set $metricsSecurityGroupRules "kube-controller-manager" (dict "port" 10257 "securityGroup" $controlPlaneSecurityGroup "remoteManagedGroups" (list $computePlaneSecurityGroup)) -}}
    {{- $metricsSecurityGroupRules = set $metricsSecurityGroupRules "kube-scheduler" (dict "port" 10259 "securityGroup" $controlPlaneSecurityGroup "remoteManagedGroups" (list $computePlaneSecurityGroup)) -}}
  {{- end }}
  {{- range $name, $securityGroupRule := $metricsSecurityGroupRules -}}
    {{- $securityGroupRules = set $securityGroupRules (printf "metrics (%s)" $name) $securityGroupRule -}}
  {{- end -}}

  {{- $allNodesSecurityGroupRules := list -}}
  {{- $controlPlaneNodesSecurityGroupRules := list -}}
  {{- $workerNodesSecurityGroupRules := list -}}
  {{- range $name, $securityGroupRule := $securityGroupRules -}}
    {{- $_securityGroupRule := dict
      "name" $name
      "description" ($securityGroupRule.description | default $name)
      "direction" "ingress"
      "etherType" "IPv4"
      "protocol" ($securityGroupRule.protocol | default "tcp")
    -}}
    {{- if or (hasKey $securityGroupRule "port") (and (hasKey $securityGroupRule "portMin") (hasKey $securityGroupRule "portMax")) -}}
      {{- $_securityGroupRule = set $_securityGroupRule "portRangeMin" ($securityGroupRule.portMin | default $securityGroupRule.port) -}}
      {{- $_securityGroupRule = set $_securityGroupRule "portRangeMax" ($securityGroupRule.portMax | default $securityGroupRule.port) -}}
    {{- end -}}
    {{- $_securityGroupRule = set $_securityGroupRule "remoteManagedGroups" ($securityGroupRule.remoteManagedGroups | default $allRemoteManagedGroups) -}}

    {{- if eq ($_securityGroupRule).securityGroup $controlPlaneSecurityGroup -}}
      {{- $controlPlaneNodesSecurityGroupRules = append $controlPlaneNodesSecurityGroupRules $_securityGroupRule  -}}
    {{- else if eq ($_securityGroupRule).securityGroup $computePlaneSecurityGroup -}}
      {{- $workerNodesSecurityGroupRules = append $workerNodesSecurityGroupRules $_securityGroupRule  -}}
    {{- else -}}
      {{- $allNodesSecurityGroupRules = append $allNodesSecurityGroupRules $_securityGroupRule  -}}
    {{- end -}}
  {{- end }}
managedSecurityGroups:
  allNodesSecurityGroupRules: {{- toYaml $allNodesSecurityGroupRules | nindent 4 }}
  controlPlaneNodesSecurityGroupRules: {{- toYaml $controlPlaneNodesSecurityGroupRules | nindent 4 }}
  workerPlaneNodesSecurityGroupRules: {{- toYaml $workerNodesSecurityGroupRules | nindent 4 }}
managedSubnets:
  - cidr: 10.6.0.0/24
{{- end -}}
