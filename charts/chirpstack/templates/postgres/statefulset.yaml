{{- if not .Values.postgres.existingPsqlUrl -}}
apiVersion: apps/v1
kind: StatefulSet
metadata: {{- include "chirpstack.commonMetadata" (dict "component" "postgres" "context" .) | nindent 2 }}
spec:
  replicas: 1
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgres
  serviceName: {{ include "chirpstack.fullname" (dict "context" . "component" "postgres") }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: postgres
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/postgres/configmap.yaml") . | sha256sum }}
    spec:
      {{- include "chirpstack.securityOptions" (dict) | nindent 6 }}
      containers:
        - env: {{- include "chirpstack.postgres.env" . | nindent 12 }}
          image: {{ include "common.images.image" (dict "imageRoot" .Values.postgres.image "global" .Values.global) }}
          name: postgres
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            tcpSocket:
              port: 5432
          resources: {{- .Values.postgres.resources | toYaml | nindent 12 }}
          ports:
            - containerPort: 5432
              name: postgres
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            privileged: false
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d
              name: postgres-init-db
            - mountPath: /var/run/postgresql
              name: postgresql-run
            - mountPath: /var/lib/postgresql/data
              name: postgresqldata
              subPath: postgres
      restartPolicy: Always
      securityContext:
        # init-db needs some privileges to change file-permissions
        fsGroup: 70
      volumes:
        - name: postgres-init-db
          configMap:
            name: {{ include "chirpstack.fullname" (dict "context" . "component" "postgres") }}
        - name: postgresql-run
          emptyDir:
            {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: postgresqldata
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.postgres.persistence.size }}
          {{ include "common.storage.class" ( dict "persistence" .Values.postgres.persistence "global" .Values.global) }}
{{- end -}}