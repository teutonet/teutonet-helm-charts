global:
  serviceLevelAgreement: None
  clusterName: ""
  baseDomain: ""
  imageRegistry: ""
  imageCredentials: {}
  priorityClasses: {}
  namespaces:
    ingress:
      condition: "{{ not (empty .Values.dns.provider) }}"
      additionalLabels:
        app.kubernetes.io/component: ingress
    cert-manager:
      additionalLabels:
        app.kubernetes.io/component: cert-manager
      resources:
        defaults:
          requests:
            cpu: 50m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 300Mi
        quotas:
          limits.cpu: "2"
          limits.memory: 2Gi
    ingress-nginx:
      condition: "{{ .Values.ingress.enabled }}"
      additionalLabels:
        app.kubernetes.io/component: ingress
    kyverno:
      condition: "{{ .Values.kyverno.enabled }}"
      additionalLabels:
        app.kubernetes.io/component: kyverno
    monitoring:
      condition: "{{ or .Values.monitoring.prometheus.enabled .Values.monitoring.metricsServer.enabled }}"
      additionalLabels:
        app.kubernetes.io/component: monitoring
      resources:
        defaults:
          requests:
            cpu: 20m
            memory: 100Mi
    loki:
      condition: "{{ .Values.monitoring.loki.enabled }}"
      additionalLabels:
        app.kubernetes.io/component: loki
        app.kubernetes.io/part-of: monitoring
    trivy:
      condition: "{{ .Values.monitoring.securityScanning.enabled }}"
      additionalLabels:
        app.kubernetes.io/component: security
    nfs-server-provisioner:
      condition: "{{ .Values.storage.readWriteMany.enabled }}"
      additionalLabels:
        app.kubernetes.io/component: storage
        app.kubernetes.io/part-of: nfs-server-provisioner
    backup:
      condition: "{{ not (empty .Values.backup.backupStorageLocations) }}"
      additionalLabels:
        app.kubernetes.io/component: backup
  certificates:
    cluster-wildcard:
      dnsNames: |-
        - {{ include "base-cluster.domain" $ | quote }}
        {{- if .Values.dns.provider }}
        - {{ printf "*.%s" (include "base-cluster.domain" $) | quote }}
        {{- end }}
      targetNamespaces: ALL
      condition: "{{ not (empty .Values.global.baseDomain) }}"
  storageClass: ""
  kubectl:
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.29.4
  flux:
    image:
      registry: docker.io
      repository: fluxcd/flux-cli
      tag: v2.2.3
  gpg:
    image:
      registry: docker.io
      repository: vladgh/gpg
      tag: 1.3.5
  curl:
    image:
      registry: docker.io
      repository: curlimages/curl
      tag: 8.7.1
  networkPolicy:
    type: none
    dnsLabels:
      io.kubernetes.pod.namespace: kube-system
      k8s-app: kube-dns
    metricsLabels:
      io.kubernetes.pod.namespace: monitoring
      app.kubernetes.io/name: prometheus
    ingressLabels:
      io.kubernetes.pod.namespace: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
  # it's important that the `url` is the first key and `charts` is right below, otherwise renovate won't detect it
  helmRepositories:
    prometheus:
      url: https://prometheus-community.github.io/helm-charts
      charts:
        kube-prometheus-stack: 58.x
      type: helm
      condition: "{{ .Values.monitoring.prometheus.enabled }}"
      interval: 5m
    grafana:
      url: https://grafana.github.io/helm-charts
      charts:
        loki-stack: 2.x.x
      condition: "{{ and .Values.monitoring.prometheus.enabled .Values.monitoring.loki.enabled }}"
    bitnami:
      url: oci://docker.io/bitnamicharts
      charts:
        oauth2-proxy: 5.x
        metrics-server: 7.x
        external-dns: 7.x
        grafana-tempo: 3.x
    descheduler:
      url: https://kubernetes-sigs.github.io/descheduler
      charts:
        descheduler: 0.29.x
      condition: "{{ .Values.descheduler.enabled }}"
    jetstack:
      url: https://charts.jetstack.io
      charts:
        cert-manager: 1.x.x
    nginx:
      url: https://kubernetes.github.io/ingress-nginx
      charts:
        ingress-nginx: 4.x.x
      condition: "{{ .Values.ingress.enabled }}"
    kyverno:
      url: https://kyverno.github.io/kyverno
      charts:
        kyverno: 3.x.x
        kyverno-policies: 3.x.x
      condition: "{{ .Values.kyverno.enabled }}"
    cetic:
      url: https://cetic.github.io/helm-charts
      charts:
        static: 0.1.1
    nfs-server-provisioner:
      url: https://kubernetes-sigs.github.io/nfs-ganesha-server-and-external-provisioner
      charts:
        nfs-server-provisioner: 1.8.0
      condition: "{{ .Values.storage.readWriteMany.enabled }}"
    teuto-net:
      url: oci://ghcr.io/teutonet/teutonet-helm-charts
    trivy:
      url: https://aquasecurity.github.io/helm-charts
      charts:
        trivy-operator: 0.x.x
      condition: "{{ .Values.monitoring.securityScanning.enabled }}"
    emberstack:
      url: https://emberstack.github.io/helm-charts
      charts:
        reflector: 7.x
      condition: '{{ include "base-cluster.reflector.enabled" (dict "context" .) }}'
    vmware:
      url: https://vmware-tanzu.github.io/helm-charts
      charts:
        velero: 6.0.0
      condition: "{{ not (empty .Values.backup.backupStorageLocations) }}"
    open-telemetry:
      url: https://open-telemetry.github.io/opentelemetry-helm-charts
      charts:
        opentelemetry-collector: 0.x.x
      condition: "{{ and .Values.monitoring.tracing.enabled .Values.monitoring.prometheus.enabled }}"
  authentication:
    config:
      clientId: ""
      clientSecret: ""
      issuerHost: ""
      issuerPath: ""
    grafana:
      authenticationPath: /protocol/openid-connect/auth
      apiPath: /protocol/openid-connect/userinfo
      tokenPath: /protocol/openid-connect/token
      roleAttributePath: '"''Viewer''"'
    oauthProxy:
      emailDomains: []
      resourcesPreset: nano
      resources:
        limits:
          cpu: 100m
          memory: 32Mi
        requests:
          cpu: 10m
          memory: 16Mi

kyverno:
  enabled: false
  podSecurityStandard: baseline
  podSecuritySeverity: medium
  validationFailureAction: audit

monitoring:
  monitorAllNamespaces: true
  labels:
    managed.by/monitoring: teutonet
  grafana:
    adminPassword: ""
    ingress:
      enabled: true
      host: grafana
      customDomain: ""
    additionalDashboards: {}
    additionalPlugins: []
    notifiers: []
    resourcesPreset: nano
    resources: {}
    sidecar:
      resourcesPreset: nano
      resources: {}
  storageCostAnalysis:
    currency: currencyEUR
    period: Day
    storageClassMapping:
      teutostack-hdd: 0.002
      teutostack-ssd: 0.0067
  deadMansSwitch:
    enabled: false
    apiKey: ""
    pingKey: ""
  prometheus:
    enabled: true
    replicas: 2
    retentionDuration: 4w
    retentionSize: 90GB
    persistence:
      storageClass: ""
      size: 100Gi
    resourcesPreset: large
    resources: {}
    operator:
      resourcesPreset: nano
      resources: {}
    kubeStateMetrics:
      resourcesPreset: nano
      resources: {}
      metricLabelsAllowList:
        pods:
          - app.kubernetes.io/name
          - app.kubernetes.io/component
          - app.kubernetes.io/instance
          - statefulset.kubernetes.io/pod-name
        deployments:
          - app.kubernetes.io/name
          - app.kubernetes.io/component
          - app.kubernetes.io/instance
        statefulsets:
          - app.kubernetes.io/name
          - app.kubernetes.io/component
          - app.kubernetes.io/instance
    nodeExporter:
      resourcesPreset: nano
      resources:
        requests:
          cpu: 10m
          memory: 32Mi
        limits:
          cpu: 2
          memory: 64Mi
    ingress:
      host: prometheus
      customDomain: ""
    alertmanager:
      receivers:
        pagerduty:
          enabled: false
          integrationKey: ""
          url: https://events.pagerduty.com/v2/enqueue
      ingress:
        host: alertmanager
        customDomain: ""
      replicas: 3
      retentionDuration: 120h
      persistence:
        storageClass: ""
        size: 1Gi
  loki:
    enabled: true
    persistence:
      storageClass: ""
      size: 10Gi
    replicas: 1
    resourcesPreset: nano
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 1
        memory: 1Gi
    promtail:
      resourcesPreset: nano
      resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          cpu: 1
          memory: 128Mi
  metricsServer:
    enabled: true
  securityScanning:
    enabled: true
    nodeCollector:
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
  tracing:
    enabled: false
    ingester:
      resourcesPreset: small
      resources: {}

descheduler:
  enabled: true
  resourcesPreset: nano
  resources:
    requests:
      cpu: 10m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi
  strategies:
    RemoveDuplicates:
      enabled: true
    RemovePodsViolatingNodeTaints:
      enabled: true
    RemovePodsViolatingNodeAffinity:
      enabled: true
      params:
        nodeAffinityType:
          - requiredDuringSchedulingIgnoredDuringExecution
    RemovePodsViolatingInterPodAntiAffinity:
      enabled: true
    RemovePodsViolatingTopologySpreadConstraint:
      enabled: true
      params:
        includeSoftConstraints: true
    RemovePodsHavingTooManyRestarts:
      enabled: true
      params:
        podsHavingTooManyRestarts:
          podRestartThreshold: 10
    LowNodeUtilization:
      enabled: true
      params:
        nodeResourceUtilizationThresholds:
          thresholds:
            cpu: 50
            memory: 50
            pods: 50
          targetThresholds:
            cpu: 70
            memory: 80
            pods: 95

dns:
  domains: []
  provider: null

certManager:
  resourcesPreset: nano
  resources: {}
  caInjector:
    resourcesPreset: nano
    resources: {}
  webhook:
    resourcesPreset: nano
    resources: {}
  dnsChallengeNameservers:
    1.1.1.1: 53

externalDNS:
  resourcesPreset: nano
  resources:
    requests:
      cpu: 10m
      memory: 64Mi
    limits:
      cpu: 50m
      memory: 128Mi

flux:
  gitRepositories: {}

ingress:
  enabled: true
  allowNginxConfigurationSnippets: false
  replicas: 2
  resourcesPreset: nano
  resources:
    limits:
      cpu: 1

storage:
  readWriteMany:
    enabled: false
    storageClass:
      name: teutostack-nfs
    persistence:
      storageClass: ""
      size: 5Gi

reflector:
  enabled: auto

rbac:
  roles: {}
  accounts: {}

backup:
  backupStorageLocations: {}
  resources:
    requests:
      cpu: 5m
      memory: 25Mi
    limits:
      cpu: 500m
      memory: 500Mi
  nodeAgent:
    resources:
      requests:
        cpu: 5m
        memory: 25Mi
      limits:
        cpu: 500m
        memory: 500Mi
