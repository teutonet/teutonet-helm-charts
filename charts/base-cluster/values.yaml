global:
  serviceLevelAgreement: None
  clusterName: ""
  baseDomain: ""
  imageRegistry: ""
  imageCredentials: {}
  priorityClasses: {}
  namespaces:
    ingress:
      condition: '{{ or (not (empty .Values.dns.provider)) (eq .Values.ingress.provider "traefik") }}'
      additionalLabels:
        app.kubernetes.io/component: ingress
    cert-manager:
      additionalLabels:
        app.kubernetes.io/component: cert-manager
      resources:
        defaults:
          requests:
            cpu: 50m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 300Mi
        quotas:
          limits.cpu: "2"
          limits.memory: 2Gi
    ingress-nginx:
      condition: '{{ eq .Values.ingress.provider "nginx" }}'
      additionalLabels:
        app.kubernetes.io/component: ingress
    kyverno:
      condition: "{{ .Values.kyverno.enabled }}"
      additionalLabels:
        app.kubernetes.io/component: kyverno
    monitoring:
      condition: "{{ or .Values.monitoring.prometheus.enabled .Values.monitoring.metricsServer.enabled }}"
      additionalLabels:
        app.kubernetes.io/component: monitoring
      resources:
        defaults:
          requests:
            cpu: 20m
            memory: 100Mi
    trivy:
      condition: "{{ .Values.monitoring.securityScanning.enabled }}"
      additionalLabels:
        app.kubernetes.io/component: security
    nfs-server-provisioner:
      condition: "{{ .Values.storage.readWriteMany.enabled }}"
      additionalLabels:
        app.kubernetes.io/component: storage
        app.kubernetes.io/part-of: nfs-server-provisioner
    backup:
      condition: "{{ not (empty .Values.backup.backupStorageLocations) }}"
      additionalLabels:
        app.kubernetes.io/component: backup
  certificates:
    cluster-wildcard:
      dnsNames: |-
        - {{ include "base-cluster.domain" $ | quote }}
        {{- if .Values.dns.provider }}
        - {{ printf "*.%s" (include "base-cluster.domain" $) | quote }}
        {{- end }}
      targetNamespaces: ALL
      condition: "{{ not (empty .Values.global.baseDomain) }}"
  storageClass: ""
  kubectl:
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.31.4-debian-12-r1@sha256:64614ef8290f3fb27fed5164b338debeeb79a1e5e26c93eb920770b71abd7c48
  flux:
    image:
      registry: docker.io
      repository: fluxcd/flux-cli
      tag: v2.4.0@sha256:a9cb966cddc1a0c56dc0d57dda485d9477dd397f8b45f222717b24663471fd1f
  gpg:
    image:
      registry: docker.io
      repository: vladgh/gpg
      tag: 1.3.6@sha256:703f8bb71adbab5ff131e1201c0fa302da53a232c35c55b9e599fc9552ef6b74
  curl:
    image:
      registry: docker.io
      repository: curlimages/curl
      tag: 8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  networkPolicy:
    type: none
    dnsLabels:
      io.kubernetes.pod.namespace: kube-system
      k8s-app: kube-dns
    metricsLabels:
      io.kubernetes.pod.namespace: monitoring
      app.kubernetes.io/name: prometheus
    ingressLabels:
      io.kubernetes.pod.namespace: '{{ eq .Values.ingress.provider "nginx" | ternary "ingress-nginx" "ingress" }}'
      app.kubernetes.io/name: '{{ eq .Values.ingress.provider "nginx" | ternary "ingress-nginx" "ingress-controller" }}'
  # it's important that the `url` is the first key and `charts` is right below, otherwise renovate won't detect it
  helmRepositories:
    prometheus:
      url: https://prometheus-community.github.io/helm-charts
      charts:
        kube-prometheus-stack: 65.8.1
      type: helm
      condition: "{{ .Values.monitoring.prometheus.enabled }}"
      interval: 5m
    grafana:
      url: https://grafana.github.io/helm-charts
      charts:
        loki: 6.29.0
        alloy: 0.12.6
      condition: "{{ and .Values.monitoring.prometheus.enabled (or .Values.monitoring.loki.enabled .Values.monitoring.tracing.enabled) }}"
    bitnami:
      url: oci://docker.io/bitnamicharts
      charts:
        oauth2-proxy: 6.2.11
        metrics-server: 7.4.6
        external-dns: 8.8.0
        grafana-tempo: 3.8.8
    descheduler:
      url: https://kubernetes-sigs.github.io/descheduler
      charts:
        descheduler: 0.32.2
        descheduler 0.29.x: 0.31.2
        descheduler 0.28.x: 0.30.2
        descheduler 0.27.x: 0.29.0
      condition: "{{ .Values.descheduler.enabled }}"
    jetstack:
      url: https://charts.jetstack.io
      charts:
        cert-manager: 1.17.2
    nginx:
      url: https://kubernetes.github.io/ingress-nginx
      charts:
        ingress-nginx: 4.12.3
      condition: '{{ eq .Values.ingress.provider "nginx" }}'
    traefik:
      url: https://helm.traefik.io/traefik
      charts:
        traefik: 35.2.0
      condition: '{{ eq .Values.ingress.provider "traefik" }}'
    kyverno:
      url: https://kyverno.github.io/kyverno
      charts:
        kyverno: 3.4.0
        kyverno-policies: 3.4.0
      condition: "{{ .Values.kyverno.enabled }}"
    tetragon:
      url: https://helm.cilium.io
      charts:
        tetragon: 1.4.0
      condition: "{{ .Values.tetragon.enabled }}"
    cetic:
      url: https://cetic.github.io/helm-charts
      charts:
        static: 0.1.1
    nfs-server-provisioner:
      url: https://kubernetes-sigs.github.io/nfs-ganesha-server-and-external-provisioner
      charts:
        nfs-server-provisioner: 1.8.0
      condition: "{{ .Values.storage.readWriteMany.enabled }}"
    teuto-net:
      url: oci://ghcr.io/teutonet/teutonet-helm-charts
    trivy:
      url: https://aquasecurity.github.io/helm-charts
      charts:
        trivy-operator: 0.27.0
      condition: "{{ .Values.monitoring.securityScanning.enabled }}"
    emberstack:
      url: https://emberstack.github.io/helm-charts
      charts:
        reflector: 7.1.288
      condition: '{{ include "base-cluster.reflector.enabled" (dict "context" .) }}'
    vmware:
      url: https://vmware-tanzu.github.io/helm-charts
      charts:
        velero: 7.1.5
      condition: "{{ not (empty .Values.backup.backupStorageLocations) }}"
    kube-janitor:
      url: https://codeberg.org/hjacobs/kube-janitor
      charts:
        kube-janitor:
          path: unsupported/helm
          tag: 23.7.0
      type: git
      condition: '{{ dig "kube-janitor" "enabled" false .Values.AsMap }}'
    kdave:
      url: https://github.com/amelbakry/kdave-chart
      charts:
        kdave:
          commit: 47a46848222969d60bae87b4650614a9b7a85d00
          path: .
      type: git
      condition: "{{ and .Values.monitoring.kdave.enabled .Values.monitoring.prometheus.enabled }}"
  authentication:
    grafana:
      authenticationPath: /protocol/openid-connect/auth
      apiPath: /protocol/openid-connect/userinfo
      tokenPath: /protocol/openid-connect/token
      roleAttributePath: '"''Viewer''"'
    oauthProxy:
      emailDomains: []
      resourcesPreset: nano
      resources:
        limits:
          cpu: 100m
          memory: 32Mi
        requests:
          cpu: 10m
          memory: 16Mi

kyverno:
  enabled: false
  podSecurityStandard: baseline
  podSecuritySeverity: medium
  validationFailureAction: audit

monitoring:
  monitorAllNamespaces: true
  labels:
    managed.by/monitoring: teutonet
  grafana:
    adminPassword: ""
    ingress:
      enabled: true
      host: grafana
      customDomain: ""
    additionalDashboards: {}
    additionalPlugins: []
    notifiers: []
    resourcesPreset: nano
    resources: {}
    persistence:
      enabled: false
      size: 10Gi
    config: {}
    sidecar:
      resourcesPreset: nano
      resources: {}
  storageCostAnalysis:
    currency: currencyEUR
    period: Day
    storageClassMapping:
      teutostack-hdd: 0.002
      teutostack-ssd: 0.0067
  deadMansSwitch:
    enabled: false
    apiKey: ""
    pingKey: ""
  kdave:
    enabled: true
  prometheus:
    enabled: true
    replicas: 2
    retentionDuration: 4w
    retentionSize: 90GB
    persistence:
      storageClass: ""
      size: 100Gi
    resourcesPreset: large
    resources: {}
    operator:
      resourcesPreset: nano
      resources: {}
    kubeStateMetrics:
      resourcesPreset: nano
      resources: {}
      metricLabelsAllowList:
        pods:
          - app.kubernetes.io/name
          - app.kubernetes.io/component
          - app.kubernetes.io/instance
          - statefulset.kubernetes.io/pod-name
        deployments:
          - app.kubernetes.io/name
          - app.kubernetes.io/component
          - app.kubernetes.io/instance
        statefulsets:
          - app.kubernetes.io/name
          - app.kubernetes.io/component
          - app.kubernetes.io/instance
    nodeExporter:
      resourcesPreset: nano
      resources:
        requests:
          cpu: 10m
          memory: 32Mi
        limits:
          cpu: 2
          memory: 64Mi
    ingress:
      host: prometheus
      customDomain: ""
    alertmanager:
      receivers:
        pagerduty:
          enabled: false
          integrationKey: ""
          url: https://events.pagerduty.com/v2/enqueue
      ingress:
        host: alertmanager
        customDomain: ""
      replicas: 3
      retentionDuration: 120h
      persistence:
        storageClass: ""
        size: 1Gi
  loki:
    enabled: true
    persistence:
      storageClass: ""
      size: 10Gi
    resourcesPreset: nano
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 1
        memory: 1Gi
    promtail:
      resourcesPreset: nano
      resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          cpu: 1
          memory: 128Mi
  metricsServer:
    enabled: true
  securityScanning:
    enabled: true
    nodeCollector:
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
  tracing:
    enabled: false
    ingester:
      resourcesPreset: small
      resources: {}
      persistence:
        size: 10Gi

descheduler:
  enabled: true
  resourcesPreset: nano
  resources:
    requests:
      cpu: 10m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi
  profile:
    pluginConfig:
      - name: DefaultEvictor
        args:
          evictLocalStoragePods: true
          nodeFit: true
      - name: RemoveDuplicates
      - name: RemovePodsHavingTooManyRestarts
        args:
          podRestartThreshold: 10
      - name: RemovePodsViolatingNodeAffinity
        args:
          nodeAffinityType:
            - requiredDuringSchedulingIgnoredDuringExecution
      - name: RemovePodsViolatingNodeTaints
      - name: RemovePodsViolatingInterPodAntiAffinity
      - name: RemovePodsViolatingTopologySpreadConstraint
        args:
          topologyBalanceNodeFit: true
      - name: LowNodeUtilization
        args:
          thresholds:
            cpu: 50
            memory: 50
            pods: 50
          targetThresholds:
            cpu: 70
            memory: 80
            pods: 95
    plugins:
      balance:
        enabled:
          - RemoveDuplicates
          - RemovePodsViolatingTopologySpreadConstraint
          - LowNodeUtilization
      deschedule:
        enabled:
          - RemovePodsHavingTooManyRestarts
          - RemovePodsViolatingNodeTaints
          - RemovePodsViolatingNodeAffinity
          - RemovePodsViolatingInterPodAntiAffinity

dns:
  domains: []
  provider: null

certManager:
  resourcesPreset: nano
  resources: {}
  caInjector:
    resourcesPreset: nano
    resources: {}
  webhook:
    resourcesPreset: nano
    resources: {}
  dnsChallengeNameservers:
    1.1.1.1: 53

externalDNS:
  resourcesPreset: nano
  resources:
    requests:
      cpu: 10m
      memory: 64Mi
    limits:
      cpu: 50m
      memory: 128Mi

flux:
  gitRepositories: {}

ingress:
  provider: traefik
  allowNginxConfigurationSnippets: false
  useProxyProtocol: true
  replicas: 2
  resourcesPreset: nano
  resources:
    limits:
      cpu: 1

storage:
  readWriteMany:
    enabled: false
    storageClass:
      name: teutostack-nfs
    persistence:
      storageClass: ""
      size: 5Gi

reflector:
  enabled: auto

rbac:
  roles: {}
  accounts: {}

backup:
  backupStorageLocations: {}
  resources:
    requests:
      cpu: 5m
      memory: 25Mi
    limits:
      cpu: 500m
      memory: 500Mi
  nodeAgent:
    resources:
      requests:
        cpu: 5m
        memory: 25Mi
      limits:
        cpu: 500m
        memory: 500Mi

kube-janitor:
  enabled: false

tetragon:
  enabled: false
