{{- define "base-cluster.flux.createAuthenticationSecretJob" -}}
{{ $name := printf "flux-generate-%s-key-secret-%s" .type .name }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name }}
  namespace: {{ $.context.Release.Namespace }}
  labels: {{- include "common.labels.standard" .context | nindent 4 }}
    app.kubernetes.io/component: {{ .name | quote }}
    app.kubernetes.io/part-of: {{ printf "flux-%s" .type }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: {{ $name }}
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 1000
        fsGroup: 1000
    {{- if eq .type "ssh" }}
      containers:
        - name: generate-ssh-key
          image: {{ template "base-cluster.flux.image" .context }}
          {{- if .context.Values.global.flux.image.digest }}
          imagePullPolicy: IfNotPresent
          {{- else }}
          imagePullPolicy: Always
          {{- end }}
          securityContext:
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop:
                - ALL
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          command:
            - sh
            - -ex
            - -c
            - |-
              set -o pipefail
              flux create secret git --namespace {{ .context.Release.Namespace }} --url {{ .url | quote }} {{ .secretName | quote }} --export \
                | kubectl --namespace {{ .context.Release.Namespace }} create -f -
    {{- else if eq .type "gpg" }}
      initContainers:
        - name: generate-gpg-key
          image: {{ template "base-cluster.gpg.image" .context }}
          {{- if .context.Values.global.gpg.image.digest }}
          imagePullPolicy: IfNotPresent
          {{- else }}
          imagePullPolicy: Always
          {{- end }}
          env:
            - name: IDENTITY
              value: {{ .identity }}
            - name: GNUPGHOME
              value: /tmp/gnupg
          securityContext:
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop:
                - ALL
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          command:
            - sh
            - -ex
            - -c
            - |-
              set -o pipefail
              gpg --batch --generate-key <<EOF
                %no-protection
                Key-Type: default
                Subkey-Type: default
                Name-Real: ${IDENTITY}
                Name-Email: root+${IDENTITY}@teuto.net
                Expire-Date: 0
              EOF

              gpg --export --armor > /tmp/gnupg/pub.asc
              gpg --export-secret-key --armor > /tmp/gnupg/sops.asc
          volumeMounts:
            - mountPath: /tmp/gnupg
              name: gnupg
      containers:
        - name: create-k8s-secret
          image: {{ include "base-cluster.kubectl.image" .context }}
          {{- if .context.Values.global.kubectl.image.digest }}
          imagePullPolicy: IfNotPresent
          {{- else }}
          imagePullPolicy: Always
          {{- end }}
          securityContext:
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop:
                - ALL
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          command:
            - kubectl
            - --namespace
            - {{ .context.Release.Namespace }}
            - create
            - secret
            - generic
            - {{ .secretName | quote }}
            - --from-file=sops.asc=/tmp/gnupg/sops.asc
            - --from-file=pub.asc=/tmp/gnupg/pub.asc
          volumeMounts:
            - mountPath: /tmp/gnupg
              name: gnupg
      volumes:
        - name: gnupg
          emptyDir: { }
    {{- end }}
{{- end -}}
