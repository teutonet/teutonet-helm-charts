{{- if .Values.flux.gitRepositories }}
  {{- range $name, $instance := .Values.flux.gitRepositories -}}
    {{- $secretName := printf "%s-flux-%s" (include "common.names.fullname" $) $name -}}
    {{- if regexMatch "^ssh://" $instance.url }}
You should configure {{ $instance.url | quote }} to accept the following key:
      {{- $existingSecret := lookup "v1" "Secret" $.Release.Namespace $secretName -}}
      {{- if $existingSecret }}
        {{- (dig "data" "identity.pub" nil $existingSecret) | b64dec | nindent 2 }}
      {{- else }}
        {{- printf "$ kubectl -n %s get secret %s -o json | jq -r '.data[\"identity.pub\"]' | base64 -d" $.Release.Namespace ($secretName | quote) | nindent 2 }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{- if .Values.monitoring.prometheus.enabled }}
You can access your grafana instance via

{{- if and .Values.dns.email .Values.monitoring.grafana.ingress.enabled .Values.global.baseDomain }}
{{- printf "https://%s" (include "base-cluster.grafana.host" $) | nindent 2 }}
{{- else }}
{{- printf "$ kubectl -n monitoring port-forward svc/kube-prometheus-stack-grafana 3000:http-web" | nindent 2 }}

http://localhost:3000
{{- end }}

Username: admin
{{- $secretName := include "common.secrets.name" (dict "defaultNameSuffix" "grafana" "context" $) -}}
{{- if lookup "v1" "Secret" "monitoring" $secretName }}
Password: {{ include "common.secrets.passwords.manage" (dict "secret" $secretName "key" "password" "providedValues" (list "monitoring.grafana.adminPassword") "context" (dict "Values" .Values "Release" (dict "Namespace" "monitoring"))) | trimAll "\"" | b64dec }}
{{- else }}
Password: $(kubectl -n monitoring get secret {{ $secretName | quote }} -o json | jq -r .data.password | base64 -d)
{{- end }}
{{- end }}