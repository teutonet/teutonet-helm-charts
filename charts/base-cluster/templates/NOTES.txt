{{- if .Values.flux.gitRepositories }}
  {{- range $name, $instance := .Values.flux.gitRepositories }}
    {{ if regexMatch "^ssh://" $instance.url -}}
      {{- $authenticationSecretName := printf "%s-flux-%s" (include "common.names.fullname" $) $name -}}
      {{- printf `You should configure "%s" to accept the following key:` $instance.url | nindent 0 }}
      {{- printf `$ kubectl -n %s get secret %s -o json | jq -r '.data["identity.pub"]' | base64 -d` $.Release.Namespace ($authenticationSecretName | quote) | nindent 2 }}
    {{- end }}
    {{- if $instance.decryption }}
      {{ if eq $instance.decryption.provider "sops" }}
        {{- $decryptionSecretName := printf "%s-flux-%s-gpg" (include "common.names.fullname" $) $name -}}
        {{- printf `You should configure "%s" to add the following key as a sops recipient and store the public key in a way that it is accessible (probably a git repository):` $instance.url | nindent 0 }}
        {{- printf `$ kubectl -n %s get secret %s -o json | jq -r '.data["pub.asc"]' | base64 -d` $.Release.Namespace ($decryptionSecretName | quote) | nindent 2 }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}

{{- if .Values.monitoring.prometheus.enabled }}

===
You can access your grafana instance via

{{- if and .Values.certManager.email .Values.monitoring.grafana.ingress.enabled .Values.global.baseDomain }}
{{- printf "https://%s" (include "base-cluster.grafana.host" $) | nindent 2 }}
{{- else }}
{{- printf "$ kubectl -n monitoring port-forward svc/kube-prometheus-stack-grafana 3000:http-web" | nindent 2 }}

http://localhost:3000
{{- end }}
{{ if .Values.global.authentication.config.clientId }}
Login via your OIDC provider, or via;

{{- end }}
Username: admin
{{- $secretName := include "common.secrets.name" (dict "defaultNameSuffix" "grafana" "context" $) -}}
{{- if lookup "v1" "Secret" "monitoring" $secretName }}
Password: {{ include "common.secrets.passwords.manage" (dict "secret" $secretName "key" "password" "providedValues" (list "monitoring.grafana.adminPassword") "context" (dict "Values" .Values "Release" (dict "Namespace" "monitoring"))) | trimAll "\"" | b64dec }}
{{- else }}
Password: $ kubectl -n monitoring get secret {{ $secretName | quote }} -o json | jq -r .data.password | base64 -d
{{- end }}
{{- end }}

{{- if .Values.rbac.accounts }}

===
Use the following commands to create a kubeconfig for an account;

function generateKubeconfig() {
  local user="${1?Missing user parameter}"
  local namespace="{{ .Release.Namespace }}"
  local cluster="$(kubectl config view --raw -o json | jq --arg context $(kubectl config current-context) -r '.contexts[] | select(.name == $context) | .context.cluster')"

  cat - <<EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority-data: $(kubectl config view --raw -o json | jq --arg cluster $cluster -r '.clusters[] | select(.name == $cluster) | .cluster["certificate-authority-data"]')
    server: $(kubectl config view --raw -o json | jq --arg cluster $cluster -r '.clusters[] | select(.name == $cluster) | .cluster.server')
  name: $cluster
contexts:
- context:
    cluster: $cluster
    user: ${user}@${cluster}
  name: ${user}@${cluster}
current-context: ${user}@${cluster}
users:
- name: ${user}@${cluster}
  user:
    token: $(kubectl -n $namespace get secret "{{ include "common.names.fullname" . }}-$user" -o jsonpath={.data.token} | base64 -d)
EOF
}

$ generateKubeconfig {{ .Values.rbac.accounts | keys | first }}
{{- end -}}
