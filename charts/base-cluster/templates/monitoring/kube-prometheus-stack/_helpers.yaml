{{- define "base-cluster.monitoring.ingress" -}}
  {{- $_ := set . "Values" .context.Values -}}
  {{- $ingress := dig .name "ingress" nil .Values.monitoring -}}
  {{- if not $ingress -}}
    {{- $ingress = include (printf "base-cluster.%s.ingress" .name) .context | fromYaml -}}
  {{- end -}}
  {{- if and .Values.certManager.email $ingress.enabled .Values.ingress.enabled (or .Values.global.baseDomain $ingress.customDomain) -}}
    {{- $host := include (printf "base-cluster.%s.host" .name) .context -}}
ingress:
  enabled: true
  {{- if or (not .Values.dns.provider) $ingress.customDomain }}
  annotations:
    kubernetes.io/tls-acme: "true"
  {{- end }}
  hosts:
    - {{ $host }}
  tls:
    - hosts:
        - {{ $host }}
      secretName: {{ include "base-cluster.certificate" (dict "name" .name "customDomain" $ingress.customDomain "context" .context) }}
  {{- end -}}
{{- end -}}

{{- define "base-cluster.prometheus-stack.containerSecurityContext" -}}
capabilities:
  drop:
    - ALL
allowPrivilegeEscalation: false
privileged: false
{{- end -}}

{{- define "base-cluster.alertmanager.ingress" -}}
  {{- .Values.monitoring.prometheus.alertmanager.ingress | toYaml -}}
{{- end -}}

{{- define "base-cluster.monitoring.ingress.enabled" -}}
  {{- $_ := set . "Values" .context.Values -}}
  {{- or (include "base-cluster.monitoring.authenticated-ingress.enabled" (dict "name" .name "context" .context)) (include "base-cluster.monitoring.unauthenticated-ingress.enabled" (dict "name" .name "context" .context)) -}}
{{- end -}}

{{- define "base-cluster.monitoring.unauthenticated-ingress.enabled" -}}
  {{- $_ := set . "Values" .context.Values -}}
  {{- $ingress := dig .name "ingress" nil .Values.monitoring -}}
  {{- if not $ingress -}}
    {{- $ingress = include (printf "base-cluster.%s.ingress" .name) .context | fromYaml -}}
  {{- end -}}
  {{- and (empty .Values.global.authentication.config.clientId) (dig "enabled" false $ingress) | ternary true "" -}}
{{- end -}}

{{- define "base-cluster.monitoring.authenticated-ingress.enabled" -}}
  {{- $_ := set . "Values" .context.Values -}}
  {{- $ingress := dig .name "ingress" nil .Values.monitoring -}}
  {{- if not $ingress -}}
    {{- $ingress = include (printf "base-cluster.%s.ingress" .name) .context | fromYaml -}}
  {{- end -}}
  {{- and (not (empty .Values.global.authentication.config.clientId)) (dig "enabled" true $ingress) | ternary true "" -}}
{{- end -}}
