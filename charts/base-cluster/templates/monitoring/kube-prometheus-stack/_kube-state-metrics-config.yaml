{{- define "base-cluster.prometheus-stack.kube-state-metrics.config" -}}
  {{- if .Values.global.imageRegistry }}
image:
  registry: {{ .Values.global.imageRegistry }}
  {{- end }}
resources: {{- include "common.resources" .Values.monitoring.prometheus.kubeStateMetrics | nindent 2 }}
  {{- $metricLabelsAllowList := list -}}
  {{- range $resource, $labels := .Values.monitoring.prometheus.kubeStateMetrics.metricLabelsAllowList -}}
    {{- $metricLabelsAllowList = append $metricLabelsAllowList (printf "%s=[%s]" $resource ($labels | join ",") ) -}}
  {{- end }}
extraArgs:
  - --metric-labels-allowlist={{- $metricLabelsAllowList | join "," }}
priorityClassName: monitoring-components
rbac:
  extraRules:
    - apiGroups:
        - helm.toolkit.fluxcd.io
        - image.toolkit.fluxcd.io
        - kustomize.toolkit.fluxcd.io
        - notification.toolkit.fluxcd.io
        - source.toolkit.fluxcd.io
      resources:
        - buckets
        - gitrepositories
        - helmcharts
        - helmreleases
        - helmrepositories
        - imagepolicies
        - imagerepositories
        - imageupdateautomations
        - kustomizations
        - ocirepositories
        - receivers
      verbs:
        - list
        - watch
customResourceState:
  enabled: true
  config:
    spec:
      {{- $types := dict
        "Bucket" "source"
        "GitRepository" "source"
        "HelmChart" "source"
        "HelmRelease" "helm"
        "HelmRepository" "source"
        "ImagePolicy" "image"
        "ImageRepository" "image"
        "ImageUpdateAutomation" "image"
        "Kustomization" "kustomize"
        "OCIRepository" "source"
        "Receiver" "notification"
      -}}

      {{- $resources := list -}}
      {{- range $kind, $group := $types -}}
        {{- $resources = append $resources (dict
              "groupVersionKind" (dict
                "group" (printf "%s.toolkit.fluxcd.io" $group)
                "kind" $kind
              )
              "metricNamePrefix" "gotk"
              "metrics" (list
                (dict
                  "name" "reconcile_condition_gauge"
                  "help" (printf "The current conditions of a Flux %s resource." $kind)
                  "each" (dict
                    "type" "Gauge"
                    "gauge" (dict
                      "path" (list "status" "conditions")
                      "labelsFromPath" (dict
                        "type" (list "type")
                      )
                      "valueFrom" (list "status")
                    )
                  )
                  "labelsFromPath" (dict
                    "customresource_namespace" (list "metadata" "namespace")
                    "customresource_name" (list "metadata" "name")
                  )
                )
                (dict
                  "name" "reconcile_suspended_gauge"
                  "help" (printf "The reconciliation suspended status of a Flux %s resource." $kind)
                  "each" (dict
                    "type" "Gauge"
                    "gauge" (dict
                      "path" (list "spec" "suspend")
                      "nilIsZero" true
                    )
                  )
                  "labelsFromPath" (dict
                    "customresource_namespace" (list "metadata" "namespace")
                    "customresource_name" (list "metadata" "name")
                  )
                )
              )
            )
        -}}
      {{- end }}
      resources: {{- toYaml $resources | nindent 8 }}
podAnnotations:
  checksum/config: {{ toYaml $resources | sha256sum | quote }}
securityContext:
  enabled: true
  seccompProfile:
    type: RuntimeDefault
  runAsNonRoot: true
containerSecurityContext: {{- include "base-cluster.prometheus-stack.containerSecurityContext" (dict) | nindent 2 }}
prometheus:
  monitor:
    additionalLabels:
      monitoring/provisioned-by: base-cluster
{{- end -}}
