{{ define "base-cluster.prometheus-stack.alertmanager.enabled" -}}
  {{- not (empty .Values.monitoring.prometheus.alertmanager.receivers) -}}
{{- end -}}

{{- define "base-cluster.prometheus-stack.alertmanager.validateReceiverInRoute" -}}
  {{- if .route.receiver -}}
    {{- if not (hasKey .receivers .route.receiver) -}}
      {{- fail (printf "Receiver '%s' is not configured" .route.receiver) -}}
    {{- end -}}
  {{- end -}}
  {{- range $route := dig "routes" (list) .route -}}
    {{- include "base-cluster.prometheus-stack.alertmanager.validateReceiverInRoute" (dict "route" $route "receivers" $.receivers) -}}
  {{- end -}}
{{- end -}}

{{- define "base-cluster.prometheus-stack.alertmanager.config" -}}
{{- if include "base-cluster.prometheus-stack.alertmanager.enabled" . -}}
enabled: true
podDisruptionBudget:
  enabled: true
{{- if include "base-cluster.monitoring.unauthenticated-ingress.enabled" (dict "name" "alertmanager" "context" .) }}
  {{- include "base-cluster.monitoring.ingress" (dict "name" "alertmanager" "context" $) | nindent 0 }}
{{- end }}
alertmanagerSpec:
  replicas: {{ .Values.monitoring.prometheus.alertmanager.replicas }}
  podAntiAffinity: soft
  {{- if include "base-cluster.monitoring.authenticated-ingress.enabled" (dict "name" "alertmanager" "context" .) }}
  externalUrl: https://{{ include "base-cluster.alertmanager.host" $ }}
  {{- end }}
  retention: {{ .Values.monitoring.prometheus.alertmanager.retentionDuration }}
  priorityClassName: monitoring-components
  storageSpec:
    volumeClaimTemplate:
      spec: {{- include "common.storage.class" (dict "persistence" .Values.monitoring.prometheus.alertmanager.persistence "global" $.Values.global) | nindent 8 }}
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.monitoring.prometheus.alertmanager.persistence.size }}
config:
  {{- $receivers := dict "null" (dict) -}}
  {{- if and .Values.monitoring.deadMansSwitch.enabled .Values.global.baseDomain .Values.global.clusterName -}}
    {{- $receivers = set $receivers "healthchecks.io" (dict
          "webhook_configs" (list
            (dict
              "url" (printf "https://hc-ping.com/%s/%s" .Values.monitoring.deadMansSwitch.pingKey (include "base-cluster.deadMansSwitch.checkName" .))
              "send_resolved" false
            )
          )
      )
    -}}
  {{- end -}}
  {{- range $name, $config := .Values.monitoring.prometheus.alertmanager.receivers -}}
    {{- $type := $name -}}
    {{- $splitted := splitList " " $name -}}
    {{- if eq (len $splitted) 2 -}}
      {{- $type = index $splitted 0 -}}
      {{- $name = index $splitted 1 -}}
    {{- end -}}
    {{- if eq $type "pagerduty" -}}
      {{- $receivers = set $receivers "pagerduty" (dict
            "pagerduty_configs" (list
              (dict
                "routing_key" $config.integrationKey
                "url" ($config.url | default "https://events.pagerduty.com/v2/enqueue")
                "send_resolved" true
                "http_config" (dict "follow_redirects" true)
              )
            )
        )
      -}}
    {{- else if eq $type "email" -}}
      {{- $receivers = set $receivers $name (dict
            "email_configs" (list
              (dict
                "to" $config.to
                "from" $config.from
                "smarthost" (printf "%s:%d" $config.host (int64 $config.port))
                "send_resolved" (dig "sendResolved" false $config)
                "auth_username" $config.username
                "auth_password" $config.password
              )
            )
        )
      -}}
    {{- end -}}
  {{- end -}}
  {{- $receiversList := list -}}
  {{- range $name, $receiver := $receivers -}}
    {{- $receiversList = append $receiversList (mustMerge (dict "name" $name) $receiver) -}}
  {{- end }}
  receivers: {{- toYaml $receiversList | nindent 4 -}}
  {{- $routes := list
    (dict
      "match" (dict "alertname" "InfoInhibitor")
      "receiver" "null"
    )
    (dict
      "match" (dict "alertname" "Watchdog")
      "receiver" (hasKey $receivers "healthchecks.io" | ternary "healthchecks.io" "null")
      "group_interval" "1m"
      "repeat_interval" "1m"
    )
  -}}
  {{- with .Values.monitoring.prometheus.alertmanager.routes -}}
    {{- $routes = concat $routes . -}}
  {{- end -}}

  {{- $route := dict
    "receiver" (include "common.tplvalues.render" (dict "value" .Values.monitoring.prometheus.alertmanager.defaultReceiver "context" .))
    "routes" $routes
  -}}
  {{- include "base-cluster.prometheus-stack.alertmanager.validateReceiverInRoute" (dict "route" $route "receivers" $receivers) }}
  route: {{- toYaml $route | nindent 4 }}
{{- else }}
enabled: false
{{- end }}
{{- end -}}
