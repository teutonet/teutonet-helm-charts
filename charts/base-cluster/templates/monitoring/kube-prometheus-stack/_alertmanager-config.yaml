{{- define "base-cluster.prometheus-stack.alertmanager.config" -}}
{{- $enabled := false -}}
{{- range $_, $receiver := .Values.monitoring.prometheus.alertmanager.receivers -}}
  {{- $enabled = or $enabled $receiver.enabled -}}
{{- end -}}
enabled: {{ $enabled }}
{{- if $enabled }}
podDisruptionBudget:
  enabled: true
{{- if include "base-cluster.monitoring.unauthenticated-ingress.enabled" (dict "name" "alertmanager" "context" .) }}
  {{- include "base-cluster.monitoring.ingress" (dict "name" "alertmanager" "context" $) | nindent 0 }}
{{- end }}
alertmanagerSpec:
  replicas: {{ .Values.monitoring.prometheus.alertmanager.replicas }}
  podAntiAffinity: soft
  {{- if include "base-cluster.monitoring.authenticated-ingress.enabled" (dict "name" "alertmanager" "context" .) }}
  externalUrl: https://{{ include "base-cluster.alertmanager.host" $ }}
  {{- end }}
  retention: {{ .Values.monitoring.prometheus.alertmanager.retentionDuration }}
  priorityClassName: monitoring-components
  storageSpec:
    volumeClaimTemplate:
      spec: {{- include "common.storage.class" (dict "persistence" .Values.monitoring.prometheus.alertmanager.persistence "global" $.Values.global) | nindent 8 }}
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.monitoring.prometheus.alertmanager.persistence.size }}
  alertmanagerConfigSelector:
    matchLabels: {{- toYaml .Values.monitoring.labels | nindent 6 }}
config:
  {{- if .Values.monitoring.prometheus.alertmanager.receivers.pagerduty.enabled }}
  global:
    pagerduty_url: {{ .Values.monitoring.prometheus.alertmanager.receivers.pagerduty.url | required "You need to provide the `.Values.monitoring.promteheus.alertmanager.receivers.pagerduty.url`" | quote }}
  {{- end }}
  {{- $receivers := dict "null" (dict) -}}
  {{- if .Values.monitoring.prometheus.alertmanager.receivers.pagerduty.enabled -}}
    {{- $receivers = set $receivers "pagerduty" (dict
          "pagerduty_configs" (list (dict
              "routing_key" (.Values.monitoring.prometheus.alertmanager.receivers.pagerduty.integrationKey | required "You need to provide the `.Values.monitoring.prometheus.alertmanager.receivers.pagerduty.integrationKey`")
              "send_resolved" true
              "http_config" (dict "follow_redirects" true)
            )
          )
      )
    -}}
  {{- end -}}
  {{- if and .Values.monitoring.deadMansSwitch.enabled .Values.global.baseDomain .Values.global.clusterName -}}
    {{- $receivers = set $receivers "healthchecks.io" (dict
          "webhook_configs" (list (dict
              "url" (printf "https://hc-ping.com/%s/k8s-cluster-%s-%s-monitoring" .Values.monitoring.deadMansSwitch.pingKey (.Values.global.baseDomain | replace "." "-") .Values.global.clusterName)
              "send_resolved" false
            )
          )
      )
    -}}
  {{- end -}}
  {{- $receiversList := list -}}
  {{- range $name, $receiver := $receivers -}}
    {{- $receiversList = append $receiversList (mustMerge (dict "name" $name) $receiver) -}}
  {{- end }}
  receivers: {{- $receiversList | toYaml | nindent 4 }}
  route: {{- if hasKey $receivers "pagerduty" }}
    receiver: pagerduty
    {{- end }}
    {{- $routes := list (dict "match" (dict "alertname" "InfoInhibitor") "receiver" "null") -}}
    {{- $routes = append $routes (dict "match" (dict "alertname" "Watchdog") "receiver" (hasKey $receivers "healthchecks.io" | ternary "healthchecks.io" "null") "group_interval" "1m" "repeat_interval" "1m") }}
    routes: {{- $routes | toYaml | nindent 6 }}
{{- end }}
{{- end -}}
