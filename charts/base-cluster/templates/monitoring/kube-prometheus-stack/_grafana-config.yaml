{{- define "base-cluster.prometheus-stack.grafana.config" -}}
imageRenderer:
  enabled: true
  securityContext:
    seccompProfile:
      type: RuntimeDefault
    runAsNonRoot: true
    runAsUser: 472
    runAsGroup: 472
enabled: true
securityContext:
  seccompProfile:
    type: RuntimeDefault
containerSecurityContext: {{- include "base-cluster.prometheus-stack.containerSecurityContext" (dict) | nindent 2 }}
resources: {{- .Values.monitoring.grafana.resources | toYaml | nindent 2 }}
serviceMonitor:
  interval: "30s"
  labels: {{- .Values.monitoring.labels | toYaml | nindent 4 }}
podAnnotations:
  # This might change on every `template` call, this can be ignored
  checksum/secret: {{ include "common.utils.checksumTemplate" (dict "path" "/monitoring/kube-prometheus-stack/grafana-secret.yaml" "context" $) }}
admin:
  existingSecret: {{ include "common.secrets.name" (dict "defaultNameSuffix" "grafana" "context" $) }}
  userKey: username
  passwordKey: password
plugins:
  - grafana-piechart-panel
  {{- with .Values.monitoring.grafana.additionalPlugins }}
  {{- . | toYaml | nindent 2 }}
  {{- end }}
defaultDashboardsEnabled: true
  {{- if .Values.monitoring.grafana.notifiers }}
extraEmptyDirMounts:
  - name: provisioning-notifiers
    mountPath: /etc/grafana/provisioning/notifiers
notifiers:
  notifiers.yaml:
    notifiers: {{- .Values.monitoring.grafana.notifiers | toYaml | nindent 6 }}
  {{- end }}
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      - name: 'custom'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/custom
sidecar:
  dashboards:
    enabled: true
    resource: configmap
    searchNamespace: ALL
  datasources:
    enabled: true
    resource: configmap
    searchNamespace: ALL
  resources: {{- .Values.monitoring.grafana.sidecar.resources | toYaml | nindent 4 }}
  securityContext: {{- include "base-cluster.prometheus-stack.containerSecurityContext" (dict) | nindent 4 }}
dashboards:
  custom:
    #capacity-planning:
    #  gnetId: 22
    #  revision: 7
    #  datasource: Prometheus
    kubernetes-cluster-monitoring-via-prometheus: &dashboard
      datasource: Prometheus
      gnetId: 315
      revision: 3
    node-exporter-full:
      <<: *dashboard
      gnetId: 1860
      revision: 16
    metrics:
      <<: *dashboard
      gnetId: 8588
    {{- if .Values.ingress.enabled}}
    ingress-nginx:
      <<: *dashboard
      gnetId: 9614
      revision: 1
    {{- end}}
    cert-manager:
      <<: *dashboard
      gnetId: 11001
      revision: 1
    flux:
      <<: *dashboard
      gnetId: 16714
      revision: 1
    {{- if .Values.dns.provider }}
    external-dns:
      <<: *dashboard
      gnetId: 15038
      revision: 1
    {{- end }}
    {{- if and .Values.monitoring.loki.enabled false }}
    # TODO: this one is broken
    loki:
      <<: *dashboard
      gnetId: 12611
      revision: 1
      datasource: Loki
    {{- end }}
    {{- if .Values.kyverno.enabled }}
    kyverno:
      <<: *dashboard
      gnetId: 15804
      revision: 4
    {{- end }}
    {{- if .Values.monitoring.securityScanning.enabled }}
    trivy:
      <<: *dashboard
      gnetId: 17813
      revision: 2
    {{- end }}
    {{- if .Values.backup.enabled }}
    velero:
      <<: *dashboard
      gnetId: 11055
      revision: 2
    {{- end }}
    {{- if .Values.monitoring.tracing.enabled }}
    open-telemetry-collector:
      <<: *dashboard
      gnetId: 15983
      revision: 9
    {{- end }}
  {{- with .Values.monitoring.grafana.additionalDashboards }}
  {{ . | toYaml | nindent 4 }}
  {{- end }}
{{- include "base-cluster.monitoring.ingress" (dict "name" "grafana" "context" $) | nindent 0 }}
{{- if and .Values.ingress.enabled .Values.monitoring.grafana.ingress.enabled .Values.certManager.email (or .Values.global.baseDomain .Values.monitoring.grafana.ingress.customDomain) }}
grafana.ini:
  auth:
    signout_redirect_url: {{ printf "https://%s" (include "base-cluster.grafana.host" .) }}
  {{- with .Values.global.authentication }}
    {{- if .config.clientId }}
    {{- $issuerUrl := printf "https://%s%s" .config.issuerHost .config.issuerPath}}
    oauth_auto_login: true
    disable_login_form: false
  auth.generic_oauth:
    enabled: true
    allow_sign_up: true
    api_url: {{ printf "%s%s" $issuerUrl .grafana.apiPath }}
    auth_url: {{ printf "%s%s" $issuerUrl .grafana.authenticationPath }}
    token_url: {{ printf "%s%s" $issuerUrl .grafana.tokenPath }}
    client_id: {{ .config.clientId }}
    client_secret: {{ .config.clientSecret }}
    name: OAuth
    role_attribute_path: {{ .grafana.roleAttributePath }}
    scopes: openid profile email
    {{- end }}
  {{- end }}
  server:
    root_url: {{ printf "https://%s" (include "base-cluster.grafana.host" .) }}
{{- end }}
downloadDashboards:
  securityContext: {{- include "base-cluster.prometheus-stack.containerSecurityContext" (dict) | nindent 4 }}
initChownData:
  enabled: false
{{- end -}}
