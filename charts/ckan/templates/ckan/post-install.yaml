{{- $name := "ckan" -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-%s-post-install" (include "common.names.fullname" $) $name | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: {{ $name }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  namespace: {{ .Release.Namespace | quote }}
spec:
  template:
    spec:
      serviceAccountName: {{ printf "%s-%s-serviceaccount" (include "common.names.fullname" $) $name | quote }}
      restartPolicy: Never
      initContainers:
        - name: wait-for-postgresql
          image: docker.io/postgres:17.1-alpine
          command: [ 'sh', '-c', 'until pg_isready -U $CKAN_DB_USER -d $CKAN_DB -h {{ printf "%s-%s" (include "ckan.postgresql.fullname" . ) "primary" }} -p 5432; do echo waiting for database; sleep 2; done;' ]
          env:
            - name: CKAN_DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.postgresql.fullname" . ) }}
                  key: ckanDatabaseUsername
            - name: CKAN_DB
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.postgresql.fullname" . ) }}
                  key: ckanDatabase
        - name: ckan-initiate
          image: {{ include "common.images.image" (dict "imageRoot" .Values.ckan.image "global" .Values.global) }}
          command: ["sh","-c","/srv/app/ckan-init.sh"]
          env:
            - name: CKAN_SYSADMIN_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }}
                  key: sysAdminUsername
            - name: CKAN_SYSADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }}
                  key: sysAdminPassword
            - name: CKAN_SYSADMIN_EMAIL
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }}
                  key: sysAdminEmail
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.postgresql.fullname" . ) }}
                  key: postgresPassword
            - name: POSTGRES_DB
              value: postgres
            - name: POSTGRES_HOST
              value: {{ printf "%s-%s" (include "ckan.postgresql.fullname" . ) "primary" }}
            - name: CKAN_DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.postgresql.fullname" . ) }}
                  key: ckanDatabaseUsername
            - name: CKAN_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.postgresql.fullname" . ) }}
                  key: ckanDatabasePassword
            - name: CKAN_DB
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.postgresql.fullname" . ) }}
                  key: ckanDatabase
            - name: DATASTORE_READONLY_USER
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.postgresql.fullname" . ) }}
                  key: datastoreUsername
            - name: DATASTORE_READONLY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.postgresql.fullname" . ) }}
                  key: datastorePassword
            - name: DATASTORE_DB
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.postgresql.fullname" . ) }}
                  key: datastoreDatabase
            - name: CKAN_SQLALCHEMY_URL
              value: "postgresql://$(CKAN_DB_USER):$(CKAN_DB_PASSWORD)@{{ printf "%s-%s" (include "ckan.postgresql.fullname" . ) "primary" }}/$(CKAN_DB)"
            - name: CKAN_DATASTORE_WRITE_URL
              value: "postgresql://$(CKAN_DB_USER):$(CKAN_DB_PASSWORD)@{{ printf "%s-%s" (include "ckan.postgresql.fullname" . ) "primary" }}/$(DATASTORE_DB)"
            - name: CKAN_DATASTORE_READ_URL
              value: "postgresql://$(DATASTORE_READONLY_USER):$(DATASTORE_READONLY_PASSWORD)@{{ printf "%s-%s" (include "ckan.postgresql.fullname" . ) "read" }}/$(DATASTORE_DB)"
            - name: CKAN_SOLR_URL
              value: "http://{{ printf "%s-%s" (include "ckan.solr.fullname" . ) "headless" }}:{{ include "ckan.solr.service.port" $ }}/solr/ckan"
            {{- if .Values.solr.auth.enabled }}
            - name: CKAN_SOLR_USER
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.solr.fullname" . ) }}
                  key: solrUsername
            - name: CKAN_SOLR_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-config" (include "ckan.solr.fullname" . ) }}
                  key: solrPassword
            {{- end }}
            - name: CKAN_REDIS_URL
              value: "redis://{{ printf "%s-%s" (include "ckan.redis.fullname" . ) "headless" }}:{{ include "ckan.redis.service.port" $}}/0"
            - name: DATAPUSHER_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }}
                  key: datapusherApiKey
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }}
                  key: secretKey
            - name: WTF_CSRF_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }}
                  key: wtfCsrfSecretKey
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }}
                  key: jwtSecret
            - name: EMAIL_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-%s-config" (include "common.names.fullname" $) "ckan" }}
                  key: emailApiKey
          volumeMounts:
            - name: configmap-volume
              mountPath: /srv/app/ckan-init.sh
              readOnly: true
              subPath: ckan-init.sh
            - mountPath: /api-tokens
              name: api-tokens-volume
        - name: update-secret
          image: docker.io/bitnami/kubectl
          command:
            - "/bin/sh"
            - "-c"
            - |
              if [ "$(ls -A /api-tokens)" ]; then
              if [ -f "/api-tokens/datapusherApiKey" ]; then
                DATAPUSHER_API_TOKEN=$(cat /api-tokens/datapusherApiKey | tr -d '\n[:space:]' | base64 -w 0 ) &&
                PATCH='[{"op": "replace", "path": "/data/datapusherApiKey", "value": "'"$DATAPUSHER_API_TOKEN"'"}]' &&
                if [ $(kubectl get secret {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }} -o jsonpath='{.data.datapusherApiKey}' | tr -d '\n[:space:]' | wc -m) -eq 0 ];
                then kubectl patch secrets {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }} --type json -p="$PATCH"; fi
              fi
              if [ -f "/api-tokens/emailApiKey" ]; then
                EMAIL_API_KEY=$(cat /api-tokens/emailApiKey | tr -d '\n[:space:]' | base64 -w 0 ) &&
                PATCH='[{"op": "replace", "path": "/data/emailApiKey", "value": "'"$EMAIL_API_KEY"'"}]' &&
                if [ $(kubectl get secret {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }} -o jsonpath='{.data.emailApiKey}' | tr -d '\n[:space:]' | wc -m) -eq 0 ];
                then kubectl patch secrets {{ printf "%s-%s-config" (include "common.names.fullname" $) $name }} --type json -p="$PATCH"; fi
              fi
                kubectl rollout restart deployment/{{ printf "%s-%s" (include "common.names.fullname" $) $name | quote }}
              fi
          volumeMounts:
            - mountPath: /api-tokens
              name: api-tokens-volume
      containers:
        - name: postinstall-config
          image: docker.io/busybox:1.28
          command: ["sh", "-c", "echo upgrade ready!"] # 92 is the uid and gid of ckan user/group
      volumes:
        - name: configmap-volume
          configMap:
            defaultMode: 0777
            name: {{ printf "%s-%s-configmap" (include "common.names.fullname" .) "ckan" }}
        - name: api-tokens-volume
          emptyDir: {}
