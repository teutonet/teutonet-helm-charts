{{- $name := "ckan" -}}
{{- $claimName := printf "%s-%s" (include "common.names.fullname" $) $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-%s" (include "common.names.fullname" $) $name | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: {{ $name }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ $name }}
  template:
    metadata:
      labels: {{- include "common.labels.matchLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ $name }}
      annotations:
        checksum/secret: {{ include "common.utils.checksumTemplate" (dict "path" "/ckan/secret.yaml" "context" $) }}-{{ include "common.utils.checksumTemplate" (dict "path" "/postgresql/secret.yaml" "context" $) }}-{{ include "common.utils.checksumTemplate" (dict "path" "/solr/secret.yaml" "context" $) }}
    spec:
      {{- include "ckan.ckan.imagePullSecrets" . | nindent 6 }}
      automountServiceAccountToken: false
      serviceAccountName: {{ printf "%s-%s-serviceaccount" (include "common.names.fullname" $) $name | quote }}
      volumes:
        - name: "ckan"
          persistentVolumeClaim:
            claimName: {{ $claimName }}
        - name: configmap-volume
          configMap:
            defaultMode: 0777
            name: my-configmap
        - name: api-tokens-volume
          emptyDir: {}
        {{- with .Values.ckan.extraVolumes }}
          {{- tpl (toYaml .) $ | nindent 8 -}}
        {{- end }}
      securityContext:
      {{- toYaml .Values.ckan.podSecurityContext | default dict | nindent 8 }}
      containers:
        - name: {{ printf "%s-%s" .Chart.Name $name }}
          env:
            {{- $envMap := dict }}

            {{- $_ := set $envMap "CKAN_SITE_ID" (dict "value" .Values.ckan.siteId) }}
            {{- $_ := set $envMap "CKAN__SITE_TITLE" (dict "value" .Values.ckan.siteTitle) }}
            {{- if .Values.ckan.ingress.hostname }}
              {{- $_ := set $envMap "CKAN_SITE_URL" (dict "value" (printf "https://%s" .Values.ckan.ingress.hostname)) }}
            {{- end }}
            {{- $_ := set $envMap "CKAN_SYSADMIN_NAME" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-%s-config" (include "common.names.fullname" $) $name) "key" "sysAdminUsername"))) }}
            {{- $_ := set $envMap "CKAN_SYSADMIN_PASSWORD" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-%s-config" (include "common.names.fullname" $) $name) "key" "sysAdminPassword"))) }}
            {{- $_ := set $envMap "CKAN_SYSADMIN_EMAIL" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-%s-config" (include "common.names.fullname" $) $name) "key" "sysAdminEmail"))) }}
            {{- if .Values.ckan.smtp }}
              {{- $_ := set $envMap "CKAN_SMTP_SERVER" (dict "value" .Values.ckan.smtp.server) }}
              {{- $_ := set $envMap "CKAN_SMTP_USER" (dict "value" .Values.ckan.smtp.user) }}
              {{- $_ := set $envMap "CKAN_SMTP_PASSWORD" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-%s-config" (include "common.names.fullname" $) $name) "key" "smtpPassword"))) }}
              {{- $_ := set $envMap "CKAN_SMTP_MAIL_FROM" (dict "value" .Values.ckan.smtp.mailFrom) }}
              {{- $_ := set $envMap "CKAN_SMTP_STARTTLS" (dict "value" .Values.ckan.smtp.starttls) }}
            {{- end }}
            {{- $_ := set $envMap "CKAN__LOCALE_DEFAULT" (dict "value"  .Values.ckan.locales.default) }}
            {{- $_ := set $envMap "CKAN__LOCALES_OFFERED" (dict "value"  .Values.ckan.locales.offered) }}
            {{- $_ := set $envMap "POSTGRES_USER" (dict "value" "postgres") }}
            {{- $_ := set $envMap "POSTGRES_PASSWORD" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-config" (include "ckan.postgresql.fullname" .)) "key" "postgresPassword"))) }}
            {{- $_ := set $envMap "POSTGRES_DB" (dict "value" "postgres") }}
            {{- $_ := set $envMap "POSTGRES_HOST" (dict "value" (printf "%s-%s" (include "ckan.postgresql.fullname" .) "primary")) }}
            {{- $_ := set $envMap "CKAN_DB_USER" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-config" (include "ckan.postgresql.fullname" .)) "key" "ckanDatabaseUsername"))) }}
            {{- $_ := set $envMap "CKAN_DB_PASSWORD" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-config" (include "ckan.postgresql.fullname" .)) "key" "ckanDatabasePassword"))) }}
            {{- $_ := set $envMap "CKAN_DB" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-config" (include "ckan.postgresql.fullname" .)) "key" "ckanDatabase"))) }}
            {{- $_ := set $envMap "DATASTORE_READONLY_USER" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-config" (include "ckan.postgresql.fullname" .)) "key" "datastoreUsername"))) }}
            {{- $_ := set $envMap "DATASTORE_READONLY_PASSWORD" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-config" (include "ckan.postgresql.fullname" .)) "key" "datastorePassword"))) }}
            {{- $_ := set $envMap "DATASTORE_DB" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-config" (include "ckan.postgresql.fullname" .)) "key" "datastoreDatabase"))) }}
            {{- $_ := set $envMap "CKAN_SQLALCHEMY_URL" (dict "value" (printf "postgresql://$(CKAN_DB_USER):$(CKAN_DB_PASSWORD)@%s/$(CKAN_DB)" (printf "%s-%s" (include "ckan.postgresql.fullname" .) "primary"))) }}
            {{- $_ := set $envMap "CKAN_DATASTORE_WRITE_URL" (dict "value" (printf "postgresql://$(CKAN_DB_USER):$(CKAN_DB_PASSWORD)@%s/$(DATASTORE_DB)" (printf "%s-%s" (include "ckan.postgresql.fullname" .) "primary"))) }}
            {{- $_ := set $envMap "CKAN_DATASTORE_READ_URL" (dict "value" (printf "postgresql://$(DATASTORE_READONLY_USER):$(DATASTORE_READONLY_PASSWORD)@%s/$(DATASTORE_DB)" (printf "%s-%s" (include "ckan.postgresql.fullname" .) "read"))) }}
            {{- $_ := set $envMap "CKAN_SOLR_URL" (dict "value" (printf "http://%s:%s/solr/ckan" (printf "%s-%s" (include "ckan.solr.fullname" .) "headless") (include "ckan.solr.service.port" $))) }}
            {{- if .Values.solr.auth.enabled }}
              {{- $_ := set $envMap "CKAN_SOLR_USER" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-config" (include "ckan.solr.fullname" .)) "key" "solrUsername"))) }}
              {{- $_ := set $envMap "CKAN_SOLR_PASSWORD" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-config" (include "ckan.solr.fullname" .)) "key" "solrPassword"))) }}
            {{- end }}
            {{- $_ := set $envMap "CKAN_REDIS_URL" (dict "value" (printf "redis://%s:%s/0" (printf "%s-%s" (include "ckan.redis.fullname" .) "headless") (include "ckan.redis.service.port" $))) }}
            {{- $_ := set $envMap "CKAN_DATAPUSHER_URL" (dict "value" (printf "http://%s:%s" (printf "%s-%s" (include "common.names.fullname" $) "datapusher") (include "ckan.datapusher.service.port" $))) }}
            {{- $_ := set $envMap "CKAN_DATAPUSHER_FORMATS" (dict "value" (join " " .Values.ckan.datapusher.formats)) }}
            {{- $_ := set $envMap "CKAN__DATAPUSHER__API_TOKEN" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-%s-config" (include "common.names.fullname" $) $name) "key" "datapusherApiKey"))) }}
            {{- $_ := set $envMap "CKAN__DATAPUSHER__CALLBACK_URL_BASE" (dict "value" (printf "http://%s:%s/" (printf "%s-%s" (include "common.names.fullname" $) "ckan") (include "ckan.ckan.service.port" $))) }}
            {{- $_ := set $envMap "SECRET_KEY" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-%s-config" (include "common.names.fullname" $) $name) "key" "secretKey"))) }}
            {{- $_ := set $envMap "WTF_CSRF_SECRET_KEY" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-%s-config" (include "common.names.fullname" $) $name) "key" "wtfCsrfSecretKey"))) }}
            {{- $_ := set $envMap "JWT_SECRET" (dict "valueFrom" (dict "secretKeyRef" (dict "name" (printf "%s-%s-config" (include "common.names.fullname" $) $name) "key" "jwtSecret"))) }}
            {{- $_ := set $envMap "CKAN__PLUGINS" (dict "value" (join " " .Values.ckan.plugins)) }}
            {{- $_ := set $envMap "CKAN__VIEWS__DEFAULT_VIEWS" (dict "value"  (join " " .Values.ckan.defaultViews)) }}

            {{- range .Values.ckan.extraEnvVars }}
              {{- if .value }}
                {{- $_ := set $envMap .name (dict "value" .value) }}
              {{- else if .valueFrom }}
                {{- $_ := set $envMap .name (dict "valueFrom" .valueFrom) }}
              {{- end }}
            {{- end }}

            {{- range $key, $entry := $envMap }}
            - name: {{ $key }}
              {{- if hasKey $entry "value" }}
              value: {{ $entry.value | quote }}
              {{- else if hasKey $entry "valueFrom" }}
              valueFrom:
                {{- toYaml $entry.valueFrom | nindent 16 }}
              {{- end }}
            {{- end }}
          securityContext:
          {{- toYaml .Values.ckan.securityContext | default dict | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /api/3/action/group_list
              port: http
            initialDelaySeconds: {{ .Values.ckan.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.ckan.readiness.periodSeconds }}
            failureThreshold: {{ .Values.ckan.readiness.failureThreshold }}
            timeoutSeconds: {{ .Values.ckan.readiness.timeoutSeconds }}
          livenessProbe:
            httpGet:
              path: /api/3/action/group_list
              port: http
            initialDelaySeconds: {{ .Values.ckan.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.ckan.liveness.periodSeconds }}
            failureThreshold: {{ .Values.ckan.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.ckan.liveness.timeoutSeconds }}
          image: {{ include "common.images.image" (dict "imageRoot" .Values.ckan.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.ckan.image.pullPolicy }}
          volumeMounts:
            - name: "ckan"
              mountPath: /var/lib/ckan
              readOnly: false
            {{- with .Values.ckan.extraVolumeMounts }}
              {{- tpl (toYaml .) $ | nindent 12 -}}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ include "ckan.ckan.service.port" $ }}
              protocol: TCP
          resources:
            {{- toYaml .Values.ckan.resources | nindent 12 }}

#TODO support CKAN HA
